--  An agent that just auctions tasks and always awards them

with Agpl.Generic_Handle,
     Gnat.Md5,
     Sancta.Network;

package Sancta.Auctions is

   --  pragma Preelaborate;

   type Auction_Id is private;

   function Id (S : String) return Auction_Id;
   --  Simply apply the chosen hash.

   function Image (Id : Auction_Id) return String;
   pragma Inline (Image);

   function "<" (L, R : Auction_Id) return Boolean;
   pragma Inline ("<");

   type Items is abstract tagged null record;
   type Item_Access is access all Items'Class;

   function Id (This : Items) return Auction_Id is abstract;

   function Image (This : Items) return String;
   --  Default one will return the Id. Override to something more meaningful.

   function Readable_Id (This : Items) return String;
   --  Concatenates Id+Image, unless they're the same.

   package Item_Handle is new Agpl.Generic_Handle (Items'Class);

   type Message_Kinds is (Offer, Bid, Award);

   type Message (Kind : Message_Kinds) is new Network.Message with record
      Id : Auction_Id;
      case Kind is
         when Offer =>
            Item    : Item_Handle.Object;
            Max_Bid : Costs;
         when Bid =>
            Bid     : Costs;
         when Award =>
            Winner  : Node_Id;
      end case;
   end record;

   ----------------
   --  POLICIES  --
   ----------------

      Log_Section    : constant String := "sancta.traderbot_types";
   Detail_Section : constant String := "sancta.traderbot_types.detail";
   --  To selectively enable debug messages...

   type Auction_Task_Policies is record
      First                    : Boolean := False;
      Second                   : Boolean := True;
      All_But_First_And_Second : Boolean := True;
      Generated                : Boolean := True;
      Added                    : Boolean := False;
      Won                      : Boolean := False;
   end record;
   --  What task will be auctioned at the auctioning time.
   --  Generated: Tasks generated by normal operation.
   --  Added: tasks received from operator.
   --  Won: tasks won in auction.

   Default_Auction_Task_Policy : constant Auction_Task_Policies :=
                                   (First                    => False,
                                    Second                   => True,
                                    All_But_First_And_Second => True,
                                    Generated                => True,
                                    Added                    => False,
                                    Won                      => False);

   type Auction_Time_Policies is record
      Auction_On_Adition      : Boolean  := True; -- When a task is added manually.
      Auction_On_Finalization : Boolean  := True; -- When a task is finished.
      Periodic                : Duration := Duration'Last;
   end record;
   --  When to start an auction

   Default_Auction_Time_Policy : constant Auction_Time_Policies :=
                                   (Auction_On_Adition      => True,
                                    Auction_On_Finalization => True,
                                    Periodic                => Duration'Last);

   --  If Added, just the Added will be auctioned.
   --  If not Added and Auction_On_Addition, all the tasks will be auctioned.

   type Insertion_Policies is (First, Last, Best);
   --  A new task is added to the first, last or best position.
   --  Best causes (|T| + 1) Task-to-Task costs to be evaluated.

private

   type Auction_Id is new Gnat.Md5.Message_Digest;

end Sancta.Auctions;
